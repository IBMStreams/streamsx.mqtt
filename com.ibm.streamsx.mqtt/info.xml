<?xml version="1.0" encoding="UTF-8"?>
<!-- Copyright (C) 2010,2012-2014, International Business Machines Corporation -->
<!-- All Rights Reserved                                                   -->
<info:toolkitInfoModel xmlns:common="http://www.ibm.com/xmlns/prod/streams/spl/common" xmlns:info="http://www.ibm.com/xmlns/prod/streams/spl/toolkitInfo">
  <info:identity>
    <info:name>com.ibm.streamsx.mqtt</info:name>
    <info:description>
The MQTT toolkit is an open source IBM Streams toolkit that helps you integrate IBM Streams with MQTT providers.

The operators provide the ability for IBM Streams applications to publish messages to MQTT topics and receive 
message from subscribed MQTT topics that are posted on an MQ Telemetry Transport (MQTT) server.

The `MQTTSource` and `MQTTSink` operators use the MQTT architecture and APIs to read and write to MQTT providers.  The operators support 
IBM MessageSight v1.1 and v1.2.

The MQTT toolkit operators must be configured to connect to messaging systems.
This configuration information can be specified in an XML document, called a connection specifications document or be done with operator parameters. 
The connection specifications document is similar to but separate from the document that is used by the Database Toolkit.

+ Developing and running applications that use the MQTT Toolkit

To create applications that use the MQTT Toolkit, you must configure either Streams Studio
or the SPL compiler to be aware of the location of the toolkit. 

# Before you begin

* Install IBM Streams. Configure the product environment variables by entering the following command: 
      &lt;source product-installation-root-directory>/&lt;your version>/bin/streamsprofile.sh


# About this task

After the location of the toolkit is communicated to the compiler, the SPL artifacts that are specified in the toolkit
can be used by an application. The application can include a use directive to bring the necessary namespaces into scope.
Alternatively, you can fully qualify the operators that are provided by toolkit with their namespaces as prefixes.

# Procedure

1. Review the list of restrictions for the IBM Streams specialized toolkits in the product documentation.
2. Configure the SPL compiler to find the toolkit root directory. Use one of the following methods:
  * Set the **STREAMS_SPLPATH** environment variable to the root directory of a toolkit or multiple toolkits (with : as a separator).
    For example:
        export STREAMS_SPLPATH=$STREAMS_INSTALL/toolkits/com.ibm.streamsx.mqtt
  * Specify the **-t** or **--spl-path** command parameter when you run the **sc** command. For example:
        sc -t $STREAMS_INSTALL/toolkits/com.ibm.streamsx.mqtt -M MyMain
    where MyMain is the name of the SPL main composite.
    **Note**: These command parameters override the **STREAMS_SPLPATH** environment variable.
  * Add the toolkit location in Streams Studio.
3. Develop your application. To avoid the need to fully qualify the operators, add a use directive in your application. 
  * For example, you can add the following clause in your SPL source file:
        use com.ibm.streamsx.mqtt::*;
    You can also specify a use clause for individual operators by replacing the asterisk (\*) with the operator name. For example: 
        use com.ibm.streamsx.mqtt::MQTTSink; 
4. Build your application. You can use the **sc** command or Streams Studio.  
5. Start the IBM Streams instance. 
6. Run the application. You can submit the application as a job by using the **streamtool submitjob** command or by using Streams Studio. 

+ Connection specifications document

A connection specifications document is an XML document that describes how operators in the MQTT Toolkit
connect to and access messaging systems.

The compiler checks that the document conforms to the semantic rules of the XML schema that is defined for these documents.
The SPL compiler uses the information that is given in the connection specifications to configure the operator. 
The compiler does not attempt to connect to the messaging system or access its data to verify correct configuration at compile time. 
The operators have run-time checks to validate configuration; if the configuration is incorrect these checks might result
in run time failures, which are captured in the processing element logs.

For `MQTTSink` and `MQTTSource` operators, the connection specifications document that is named by the **connectionDocument** operator
parameter contains only a &lt;connection_specification> element. The **connectionDocument** operator parameter is not mandatory.
You can specify the connection information as parameters to the operator.

A valid connection specifications document consists of a connections root element
which contains one &lt;connection_specifications> element.
These elements serve as containers for the connection specifications.
Here is an abridged example of a complete connection specifications document,
with all &lt;connection_specification> elements omitted:

    &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>
    &lt;st:connections xmlns:st=&quot;http://www.ibm.com/xmlns/prod/streams/adapters&quot;
    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;>
      &lt;connection_specifications>
      ...
      &lt;/connection_specifications>
    &lt;/st:connections>

++ Connection_specification element

A &lt;connection_specifications> element is a sequence of zero or more &lt;connection_specification> elements.

Each &lt;connection_specification> element has a single attribute, name.
This name value is used in the **connection** parameter of the Toolkit operators.

A &lt;connection_specification> element must have exactly one MQTT element.

+++ MQTT element

The &lt;MQTT> element specifies the information that is needed by the `MQTTSink` and `MQTTSource` operators
to establish a connection with MQTT-based messaging systems.

The following example shows a &lt;connection_specification> element that contains an &lt;MQTT> element:

    &lt;connection_specifications>
      &lt;connection_specification name=&quot;mqttconn&quot;>
        &lt;MQTT serverURI=&quot;ssl://hostname:1883&quot; trustStore=&quot;etc/trustFile.jks&quot;/>
      &lt;/connection_specification>
    &lt;/connection_specifications>

The &lt;MQTT> element has the following attributes:
* keyStorePassword
  * This optional attribute specifies the password for the keystore file.
    This attribute is specified when the keyStore attribute is specified and the keystore file it is protected by a password.
    If the keyStorePassword is invalid the operator terminates.
* keyStore
  * This optional attribute specifies the name of the keystore file, which is in one of the supported format by the JDK being used.
    The keystore file must contain the public certificate and the private key of the MQTT server that you want to connect to.
    If the keystore file does not exist, the operator terminates. The location of the keystore file can be absolute path
    or a path that is relative to the application directory.
* serverURI
  * This required attribute specifies the URI of the MQTT server that you want to connect to.
    The serverURI has the following format: *protocol*://*hostname* or *IP address*:*portnumber*
  * The supported protocols are SSL and TCP. 
    By default, the protocol is set to `tcp`, and the operators use the TCP protocol to connect to an MQTT server.
  * To use SSL authentication, set the protocol to ssl.
    You must also specify a value for the following attributes based on the type of SSL authentication:
    * For client SSL authentication, if a password is set for the keystore,
      set the keyStore and keyStorePassword attributes in the MQTT element.
    * For server SSL authentication, set the trustStore attribute in the MQTT element.
    * For mutual SSL authentication, if a password is set for the keystore, set the trustStore, keyStore,
      and keyStorePassword attributes in the MQTT element.
  * If you do not set the appropriate attributes, a run time error occurs. 
* trustStore
  * This optional attribute specifies the name of the truststore file, which is in one of the supported format by the JDK being used.
    You can specify an absolute path or a path that is relative to the application directory.
    The truststore file must contain the public certificates of all the trusted MQTT servers.
    If the truststore does not contain a public certificate for an MQTT server, the connection to that server is terminated.

</info:description>
    <info:version>1.0.1</info:version>
    <info:requiredProductVersion>4.2.0.0</info:requiredProductVersion>
  </info:identity>
  <info:dependencies/>
</info:toolkitInfoModel>

